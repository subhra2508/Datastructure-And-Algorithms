The following two are the most commonly used representations of a graph. 
1. Adjacency Matrix 
2. Adjacency List 
There are other representations also like, Incidence Matrix and Incidence List. The choice of graph representation is situation-specific. It totally depends on the type of operations to be performed and ease of use. 




Adjacency Matrix: 
Adjacency Matrix is a 2D array of size V x V where V is the number of vertices in a graph. 
Let the 2D array be adj[][], a slot adj[i][j] = 1 indicates that there is an edge from vertex i to vertex j. 
Adjacency matrix for undirected graph is always symmetric. 
Adjacency Matrix is also used to represent weighted graphs. If adj[i][j] = w, then there is an edge from vertex i to vertex j with weight w. 


Adjacency List: 
An array of lists is used. The size of the array is equal to the number of vertices. 
Let the array be an array[]. An entry array[i] represents the list of vertices adjacent to the ith vertex. 
This representation can also be used to represent a weighted graph. 
The weights of edges can be represented as lists of pairs. Following is the adjacency list representation of the above graph.


- for every graphs you always going to use a visited_arr[]
- everyone initially unvisited
- 
```c++
 for(i->10) 
    if(!visited_arr[i])
        call_traversal_algo()
```
- traversal_algorithms -> BFS,DFS
- BFS also known as [level wise traversal]
    - create a queue and have the starting_index of the graph
    - a visited_arr[]
    - adjacency_list is used to store the graph, ex:
        - 0 -> {}
        - 1 -> {2,6}
        - 2 -> {1,3,4}
    - 
